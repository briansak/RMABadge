ARM GAS  /tmp/ccWziojC.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB34:
  26              		.file 1 "Src/stm32l0xx_it.c"
   1:Src/stm32l0xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32l0xx_it.c **** /**
   3:Src/stm32l0xx_it.c ****   ******************************************************************************
   4:Src/stm32l0xx_it.c ****   * @file    stm32l0xx_it.c
   5:Src/stm32l0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32l0xx_it.c ****   ******************************************************************************
   7:Src/stm32l0xx_it.c ****   * @attention
   8:Src/stm32l0xx_it.c ****   *
   9:Src/stm32l0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32l0xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32l0xx_it.c ****   *
  12:Src/stm32l0xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32l0xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32l0xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32l0xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32l0xx_it.c ****   *
  17:Src/stm32l0xx_it.c ****   ******************************************************************************
  18:Src/stm32l0xx_it.c ****   */
  19:Src/stm32l0xx_it.c **** /* USER CODE END Header */
  20:Src/stm32l0xx_it.c **** 
  21:Src/stm32l0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32l0xx_it.c **** #include "main.h"
  23:Src/stm32l0xx_it.c **** #include "stm32l0xx_it.h"
  24:Src/stm32l0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32l0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32l0xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32l0xx_it.c **** 
  28:Src/stm32l0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32l0xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32l0xx_it.c **** 
  31:Src/stm32l0xx_it.c **** /* USER CODE END TD */
  32:Src/stm32l0xx_it.c **** 
ARM GAS  /tmp/ccWziojC.s 			page 2


  33:Src/stm32l0xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32l0xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32l0xx_it.c ****  
  36:Src/stm32l0xx_it.c **** /* USER CODE END PD */
  37:Src/stm32l0xx_it.c **** 
  38:Src/stm32l0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32l0xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32l0xx_it.c **** 
  41:Src/stm32l0xx_it.c **** /* USER CODE END PM */
  42:Src/stm32l0xx_it.c **** 
  43:Src/stm32l0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32l0xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32l0xx_it.c **** 
  46:Src/stm32l0xx_it.c **** /* USER CODE END PV */
  47:Src/stm32l0xx_it.c **** 
  48:Src/stm32l0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32l0xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32l0xx_it.c **** 
  51:Src/stm32l0xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32l0xx_it.c **** 
  53:Src/stm32l0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32l0xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32l0xx_it.c **** 
  56:Src/stm32l0xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32l0xx_it.c **** 
  58:Src/stm32l0xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32l0xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  60:Src/stm32l0xx_it.c **** /* USER CODE BEGIN EV */
  61:Src/stm32l0xx_it.c **** 
  62:Src/stm32l0xx_it.c **** /* USER CODE END EV */
  63:Src/stm32l0xx_it.c **** 
  64:Src/stm32l0xx_it.c **** /******************************************************************************/
  65:Src/stm32l0xx_it.c **** /*           Cortex-M0+ Processor Interruption and Exception Handlers          */ 
  66:Src/stm32l0xx_it.c **** /******************************************************************************/
  67:Src/stm32l0xx_it.c **** /**
  68:Src/stm32l0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  69:Src/stm32l0xx_it.c ****   */
  70:Src/stm32l0xx_it.c **** void NMI_Handler(void)
  71:Src/stm32l0xx_it.c **** {
  27              		.loc 1 71 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  72:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  73:Src/stm32l0xx_it.c **** 
  74:Src/stm32l0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  75:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  76:Src/stm32l0xx_it.c **** 
  77:Src/stm32l0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  78:Src/stm32l0xx_it.c **** }
  32              		.loc 1 78 1 view .LVU1
  33              		@ sp needed
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE34:
  38              		.section	.text.HardFault_Handler,"ax",%progbits
ARM GAS  /tmp/ccWziojC.s 			page 3


  39              		.align	1
  40              		.global	HardFault_Handler
  41              		.syntax unified
  42              		.code	16
  43              		.thumb_func
  44              		.fpu softvfp
  46              	HardFault_Handler:
  47              	.LFB35:
  79:Src/stm32l0xx_it.c **** 
  80:Src/stm32l0xx_it.c **** /**
  81:Src/stm32l0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  82:Src/stm32l0xx_it.c ****   */
  83:Src/stm32l0xx_it.c **** void HardFault_Handler(void)
  84:Src/stm32l0xx_it.c **** {
  48              		.loc 1 84 1 view -0
  49              		.cfi_startproc
  50              		@ Volatile: function does not return.
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54              	.L3:
  85:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  86:Src/stm32l0xx_it.c **** 
  87:Src/stm32l0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  88:Src/stm32l0xx_it.c ****   while (1)
  55              		.loc 1 88 3 discriminator 1 view .LVU3
  89:Src/stm32l0xx_it.c ****   {
  90:Src/stm32l0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  91:Src/stm32l0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  92:Src/stm32l0xx_it.c ****   }
  56              		.loc 1 92 3 discriminator 1 view .LVU4
  57 0000 FEE7     		b	.L3
  58              		.cfi_endproc
  59              	.LFE35:
  61              		.section	.text.SVC_Handler,"ax",%progbits
  62              		.align	1
  63              		.global	SVC_Handler
  64              		.syntax unified
  65              		.code	16
  66              		.thumb_func
  67              		.fpu softvfp
  69              	SVC_Handler:
  70              	.LFB36:
  93:Src/stm32l0xx_it.c **** }
  94:Src/stm32l0xx_it.c **** 
  95:Src/stm32l0xx_it.c **** /**
  96:Src/stm32l0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
  97:Src/stm32l0xx_it.c ****   */
  98:Src/stm32l0xx_it.c **** void SVC_Handler(void)
  99:Src/stm32l0xx_it.c **** {
  71              		.loc 1 99 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
 100:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 101:Src/stm32l0xx_it.c **** 
ARM GAS  /tmp/ccWziojC.s 			page 4


 102:Src/stm32l0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 103:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 104:Src/stm32l0xx_it.c **** 
 105:Src/stm32l0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 106:Src/stm32l0xx_it.c **** }
  76              		.loc 1 106 1 view .LVU6
  77              		@ sp needed
  78 0000 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE36:
  82              		.section	.text.PendSV_Handler,"ax",%progbits
  83              		.align	1
  84              		.global	PendSV_Handler
  85              		.syntax unified
  86              		.code	16
  87              		.thumb_func
  88              		.fpu softvfp
  90              	PendSV_Handler:
  91              	.LFB37:
 107:Src/stm32l0xx_it.c **** 
 108:Src/stm32l0xx_it.c **** /**
 109:Src/stm32l0xx_it.c ****   * @brief This function handles Pendable request for system service.
 110:Src/stm32l0xx_it.c ****   */
 111:Src/stm32l0xx_it.c **** void PendSV_Handler(void)
 112:Src/stm32l0xx_it.c **** {
  92              		.loc 1 112 1 view -0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
 113:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 114:Src/stm32l0xx_it.c **** 
 115:Src/stm32l0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 116:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 117:Src/stm32l0xx_it.c **** 
 118:Src/stm32l0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 119:Src/stm32l0xx_it.c **** }
  97              		.loc 1 119 1 view .LVU8
  98              		@ sp needed
  99 0000 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE37:
 103              		.section	.text.SysTick_Handler,"ax",%progbits
 104              		.align	1
 105              		.global	SysTick_Handler
 106              		.syntax unified
 107              		.code	16
 108              		.thumb_func
 109              		.fpu softvfp
 111              	SysTick_Handler:
 112              	.LFB38:
 120:Src/stm32l0xx_it.c **** 
 121:Src/stm32l0xx_it.c **** /**
 122:Src/stm32l0xx_it.c ****   * @brief This function handles System tick timer.
 123:Src/stm32l0xx_it.c ****   */
 124:Src/stm32l0xx_it.c **** void SysTick_Handler(void)
 125:Src/stm32l0xx_it.c **** {
ARM GAS  /tmp/ccWziojC.s 			page 5


 113              		.loc 1 125 1 view -0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117 0000 10B5     		push	{r4, lr}
 118              	.LCFI0:
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 4, -8
 121              		.cfi_offset 14, -4
 126:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 127:Src/stm32l0xx_it.c **** 
 128:Src/stm32l0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 129:Src/stm32l0xx_it.c ****   HAL_IncTick();
 122              		.loc 1 129 3 view .LVU10
 123 0002 FFF7FEFF 		bl	HAL_IncTick
 124              	.LVL0:
 130:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 131:Src/stm32l0xx_it.c **** 
 132:Src/stm32l0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 133:Src/stm32l0xx_it.c **** }
 125              		.loc 1 133 1 is_stmt 0 view .LVU11
 126              		@ sp needed
 127 0006 10BD     		pop	{r4, pc}
 128              		.cfi_endproc
 129              	.LFE38:
 131              		.section	.text.USB_IRQHandler,"ax",%progbits
 132              		.align	1
 133              		.global	USB_IRQHandler
 134              		.syntax unified
 135              		.code	16
 136              		.thumb_func
 137              		.fpu softvfp
 139              	USB_IRQHandler:
 140              	.LFB39:
 134:Src/stm32l0xx_it.c **** 
 135:Src/stm32l0xx_it.c **** /******************************************************************************/
 136:Src/stm32l0xx_it.c **** /* STM32L0xx Peripheral Interrupt Handlers                                    */
 137:Src/stm32l0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 138:Src/stm32l0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 139:Src/stm32l0xx_it.c **** /* please refer to the startup file (startup_stm32l0xx.s).                    */
 140:Src/stm32l0xx_it.c **** /******************************************************************************/
 141:Src/stm32l0xx_it.c **** 
 142:Src/stm32l0xx_it.c **** /**
 143:Src/stm32l0xx_it.c ****   * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
 144:Src/stm32l0xx_it.c ****   */
 145:Src/stm32l0xx_it.c **** void USB_IRQHandler(void)
 146:Src/stm32l0xx_it.c **** {
 141              		.loc 1 146 1 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 10B5     		push	{r4, lr}
 146              	.LCFI1:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 4, -8
 149              		.cfi_offset 14, -4
 147:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 0 */
ARM GAS  /tmp/ccWziojC.s 			page 6


 148:Src/stm32l0xx_it.c **** 
 149:Src/stm32l0xx_it.c ****   /* USER CODE END USB_IRQn 0 */
 150:Src/stm32l0xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 150              		.loc 1 150 3 view .LVU13
 151 0002 0248     		ldr	r0, .L8
 152 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 153              	.LVL1:
 151:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 1 */
 152:Src/stm32l0xx_it.c **** 
 153:Src/stm32l0xx_it.c ****   /* USER CODE END USB_IRQn 1 */
 154:Src/stm32l0xx_it.c **** }
 154              		.loc 1 154 1 is_stmt 0 view .LVU14
 155              		@ sp needed
 156 0008 10BD     		pop	{r4, pc}
 157              	.L9:
 158 000a C046     		.align	2
 159              	.L8:
 160 000c 00000000 		.word	hpcd_USB_FS
 161              		.cfi_endproc
 162              	.LFE39:
 164              		.text
 165              	.Letext0:
 166              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 167              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 168              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 169              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l052xx.h"
 170              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 171              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usb.h"
 172              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_pcd.h"
 173              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
ARM GAS  /tmp/ccWziojC.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l0xx_it.c
     /tmp/ccWziojC.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccWziojC.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccWziojC.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccWziojC.s:46     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccWziojC.s:62     .text.SVC_Handler:0000000000000000 $t
     /tmp/ccWziojC.s:69     .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccWziojC.s:83     .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccWziojC.s:90     .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccWziojC.s:104    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccWziojC.s:111    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccWziojC.s:132    .text.USB_IRQHandler:0000000000000000 $t
     /tmp/ccWziojC.s:139    .text.USB_IRQHandler:0000000000000000 USB_IRQHandler
     /tmp/ccWziojC.s:160    .text.USB_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_PCD_IRQHandler
hpcd_USB_FS
