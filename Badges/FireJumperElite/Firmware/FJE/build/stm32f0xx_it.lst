ARM GAS  /tmp/ccJulGdt.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB40:
  26              		.file 1 "Src/stm32f0xx_it.c"
   1:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f0xx_it.c **** /**
   3:Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Src/stm32f0xx_it.c ****   * @attention
   8:Src/stm32f0xx_it.c ****   *
   9:Src/stm32f0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/stm32f0xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f0xx_it.c ****   *
  12:Src/stm32f0xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32f0xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32f0xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Src/stm32f0xx_it.c ****   *                             www.st.com/SLA0044
  16:Src/stm32f0xx_it.c ****   *
  17:Src/stm32f0xx_it.c ****   ******************************************************************************
  18:Src/stm32f0xx_it.c ****   */
  19:Src/stm32f0xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f0xx_it.c **** 
  21:Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f0xx_it.c **** #include "main.h"
  23:Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  24:Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f0xx_it.c **** 
  28:Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f0xx_it.c **** 
  31:Src/stm32f0xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f0xx_it.c **** 
ARM GAS  /tmp/ccJulGdt.s 			page 2


  33:Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f0xx_it.c ****  
  36:Src/stm32f0xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f0xx_it.c **** 
  38:Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f0xx_it.c **** 
  41:Src/stm32f0xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f0xx_it.c **** 
  43:Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f0xx_it.c **** 
  46:Src/stm32f0xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f0xx_it.c **** 
  48:Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f0xx_it.c **** 
  51:Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f0xx_it.c **** 
  53:Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f0xx_it.c **** 
  56:Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f0xx_it.c **** 
  58:Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f0xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  60:Src/stm32f0xx_it.c **** extern TIM_HandleTypeDef htim1;
  61:Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  62:Src/stm32f0xx_it.c **** 
  63:Src/stm32f0xx_it.c **** /* USER CODE END EV */
  64:Src/stm32f0xx_it.c **** 
  65:Src/stm32f0xx_it.c **** /******************************************************************************/
  66:Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */ 
  67:Src/stm32f0xx_it.c **** /******************************************************************************/
  68:Src/stm32f0xx_it.c **** /**
  69:Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Src/stm32f0xx_it.c ****   */
  71:Src/stm32f0xx_it.c **** void NMI_Handler(void)
  72:Src/stm32f0xx_it.c **** {
  27              		.loc 1 72 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  73:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  74:Src/stm32f0xx_it.c **** 
  75:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Src/stm32f0xx_it.c **** 
  78:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  79:Src/stm32f0xx_it.c **** }
  32              		.loc 1 79 1 view .LVU1
  33              		@ sp needed
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE40:
ARM GAS  /tmp/ccJulGdt.s 			page 3


  38              		.section	.text.HardFault_Handler,"ax",%progbits
  39              		.align	1
  40              		.global	HardFault_Handler
  41              		.syntax unified
  42              		.code	16
  43              		.thumb_func
  44              		.fpu softvfp
  46              	HardFault_Handler:
  47              	.LFB41:
  80:Src/stm32f0xx_it.c **** 
  81:Src/stm32f0xx_it.c **** /**
  82:Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  83:Src/stm32f0xx_it.c ****   */
  84:Src/stm32f0xx_it.c **** void HardFault_Handler(void)
  85:Src/stm32f0xx_it.c **** {
  48              		.loc 1 85 1 view -0
  49              		.cfi_startproc
  50              		@ Volatile: function does not return.
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54              	.L3:
  86:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  87:Src/stm32f0xx_it.c **** 
  88:Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  89:Src/stm32f0xx_it.c ****   while (1)
  55              		.loc 1 89 3 discriminator 1 view .LVU3
  90:Src/stm32f0xx_it.c ****   {
  91:Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  92:Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  93:Src/stm32f0xx_it.c ****   }
  56              		.loc 1 93 3 discriminator 1 view .LVU4
  89:Src/stm32f0xx_it.c ****   {
  57              		.loc 1 89 9 discriminator 1 view .LVU5
  58 0000 FEE7     		b	.L3
  59              		.cfi_endproc
  60              	.LFE41:
  62              		.section	.text.SVC_Handler,"ax",%progbits
  63              		.align	1
  64              		.global	SVC_Handler
  65              		.syntax unified
  66              		.code	16
  67              		.thumb_func
  68              		.fpu softvfp
  70              	SVC_Handler:
  71              	.LFB42:
  94:Src/stm32f0xx_it.c **** }
  95:Src/stm32f0xx_it.c **** 
  96:Src/stm32f0xx_it.c **** /**
  97:Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
  98:Src/stm32f0xx_it.c ****   */
  99:Src/stm32f0xx_it.c **** void SVC_Handler(void)
 100:Src/stm32f0xx_it.c **** {
  72              		.loc 1 100 1 view -0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccJulGdt.s 			page 4


  76              		@ link register save eliminated.
 101:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 102:Src/stm32f0xx_it.c **** 
 103:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 104:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 105:Src/stm32f0xx_it.c **** 
 106:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 107:Src/stm32f0xx_it.c **** }
  77              		.loc 1 107 1 view .LVU7
  78              		@ sp needed
  79 0000 7047     		bx	lr
  80              		.cfi_endproc
  81              	.LFE42:
  83              		.section	.text.PendSV_Handler,"ax",%progbits
  84              		.align	1
  85              		.global	PendSV_Handler
  86              		.syntax unified
  87              		.code	16
  88              		.thumb_func
  89              		.fpu softvfp
  91              	PendSV_Handler:
  92              	.LFB43:
 108:Src/stm32f0xx_it.c **** 
 109:Src/stm32f0xx_it.c **** /**
 110:Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 111:Src/stm32f0xx_it.c ****   */
 112:Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 113:Src/stm32f0xx_it.c **** {
  93              		.loc 1 113 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
 114:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 115:Src/stm32f0xx_it.c **** 
 116:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 117:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 118:Src/stm32f0xx_it.c **** 
 119:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 120:Src/stm32f0xx_it.c **** }
  98              		.loc 1 120 1 view .LVU9
  99              		@ sp needed
 100 0000 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE43:
 104              		.section	.text.SysTick_Handler,"ax",%progbits
 105              		.align	1
 106              		.global	SysTick_Handler
 107              		.syntax unified
 108              		.code	16
 109              		.thumb_func
 110              		.fpu softvfp
 112              	SysTick_Handler:
 113              	.LFB44:
 121:Src/stm32f0xx_it.c **** 
 122:Src/stm32f0xx_it.c **** /**
 123:Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
ARM GAS  /tmp/ccJulGdt.s 			page 5


 124:Src/stm32f0xx_it.c ****   */
 125:Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 126:Src/stm32f0xx_it.c **** {
 114              		.loc 1 126 1 view -0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 10B5     		push	{r4, lr}
 119              	.LCFI0:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 4, -8
 122              		.cfi_offset 14, -4
 127:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 128:Src/stm32f0xx_it.c **** 
 129:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 130:Src/stm32f0xx_it.c ****   HAL_IncTick();
 123              		.loc 1 130 3 view .LVU11
 124 0002 FFF7FEFF 		bl	HAL_IncTick
 125              	.LVL0:
 131:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 132:Src/stm32f0xx_it.c **** 
 133:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 134:Src/stm32f0xx_it.c **** }
 126              		.loc 1 134 1 is_stmt 0 view .LVU12
 127              		@ sp needed
 128 0006 10BD     		pop	{r4, pc}
 129              		.cfi_endproc
 130              	.LFE44:
 132              		.section	.text.EXTI4_15_IRQHandler,"ax",%progbits
 133              		.align	1
 134              		.global	EXTI4_15_IRQHandler
 135              		.syntax unified
 136              		.code	16
 137              		.thumb_func
 138              		.fpu softvfp
 140              	EXTI4_15_IRQHandler:
 141              	.LFB45:
 135:Src/stm32f0xx_it.c **** 
 136:Src/stm32f0xx_it.c **** /******************************************************************************/
 137:Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 138:Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 139:Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 140:Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 141:Src/stm32f0xx_it.c **** /******************************************************************************/
 142:Src/stm32f0xx_it.c **** 
 143:Src/stm32f0xx_it.c **** /**
 144:Src/stm32f0xx_it.c ****   * @brief This function handles EXTI line 4 to 15 interrupts.
 145:Src/stm32f0xx_it.c ****   */
 146:Src/stm32f0xx_it.c **** void EXTI4_15_IRQHandler(void)
 147:Src/stm32f0xx_it.c **** {
 142              		.loc 1 147 1 is_stmt 1 view -0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146 0000 10B5     		push	{r4, lr}
 147              	.LCFI1:
 148              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJulGdt.s 			page 6


 149              		.cfi_offset 4, -8
 150              		.cfi_offset 14, -4
 148:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN EXTI4_15_IRQn 0 */
 149:Src/stm32f0xx_it.c **** 
 150:Src/stm32f0xx_it.c ****   /* USER CODE END EXTI4_15_IRQn 0 */
 151:Src/stm32f0xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 151              		.loc 1 151 3 view .LVU14
 152 0002 2020     		movs	r0, #32
 153 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 154              	.LVL1:
 152:Src/stm32f0xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 155              		.loc 1 152 3 view .LVU15
 156 0008 4020     		movs	r0, #64
 157 000a FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 158              	.LVL2:
 153:Src/stm32f0xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 159              		.loc 1 153 3 view .LVU16
 160 000e 8020     		movs	r0, #128
 161 0010 4000     		lsls	r0, r0, #1
 162 0012 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 163              	.LVL3:
 154:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN EXTI4_15_IRQn 1 */
 155:Src/stm32f0xx_it.c **** 
 156:Src/stm32f0xx_it.c ****   /* USER CODE END EXTI4_15_IRQn 1 */
 157:Src/stm32f0xx_it.c **** }
 164              		.loc 1 157 1 is_stmt 0 view .LVU17
 165              		@ sp needed
 166 0016 10BD     		pop	{r4, pc}
 167              		.cfi_endproc
 168              	.LFE45:
 170              		.section	.text.TIM1_BRK_UP_TRG_COM_IRQHandler,"ax",%progbits
 171              		.align	1
 172              		.global	TIM1_BRK_UP_TRG_COM_IRQHandler
 173              		.syntax unified
 174              		.code	16
 175              		.thumb_func
 176              		.fpu softvfp
 178              	TIM1_BRK_UP_TRG_COM_IRQHandler:
 179              	.LFB46:
 158:Src/stm32f0xx_it.c **** 
 159:Src/stm32f0xx_it.c **** /**
 160:Src/stm32f0xx_it.c ****   * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
 161:Src/stm32f0xx_it.c ****   */
 162:Src/stm32f0xx_it.c **** void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
 163:Src/stm32f0xx_it.c **** {
 180              		.loc 1 163 1 is_stmt 1 view -0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184 0000 10B5     		push	{r4, lr}
 185              	.LCFI2:
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 4, -8
 188              		.cfi_offset 14, -4
 164:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
 165:Src/stm32f0xx_it.c **** 
 166:Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
ARM GAS  /tmp/ccJulGdt.s 			page 7


 167:Src/stm32f0xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 189              		.loc 1 167 3 view .LVU19
 190 0002 0248     		ldr	r0, .L9
 191 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 192              	.LVL4:
 168:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
 169:Src/stm32f0xx_it.c **** 
 170:Src/stm32f0xx_it.c ****   /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
 171:Src/stm32f0xx_it.c **** }
 193              		.loc 1 171 1 is_stmt 0 view .LVU20
 194              		@ sp needed
 195 0008 10BD     		pop	{r4, pc}
 196              	.L10:
 197 000a C046     		.align	2
 198              	.L9:
 199 000c 00000000 		.word	htim1
 200              		.cfi_endproc
 201              	.LFE46:
 203              		.section	.text.USB_IRQHandler,"ax",%progbits
 204              		.align	1
 205              		.global	USB_IRQHandler
 206              		.syntax unified
 207              		.code	16
 208              		.thumb_func
 209              		.fpu softvfp
 211              	USB_IRQHandler:
 212              	.LFB47:
 172:Src/stm32f0xx_it.c **** 
 173:Src/stm32f0xx_it.c **** /**
 174:Src/stm32f0xx_it.c ****   * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
 175:Src/stm32f0xx_it.c ****   */
 176:Src/stm32f0xx_it.c **** void USB_IRQHandler(void)
 177:Src/stm32f0xx_it.c **** {
 213              		.loc 1 177 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 10B5     		push	{r4, lr}
 218              	.LCFI3:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 4, -8
 221              		.cfi_offset 14, -4
 178:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 0 */
 179:Src/stm32f0xx_it.c **** 
 180:Src/stm32f0xx_it.c ****   /* USER CODE END USB_IRQn 0 */
 181:Src/stm32f0xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 222              		.loc 1 181 3 view .LVU22
 223 0002 0248     		ldr	r0, .L12
 224 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 225              	.LVL5:
 182:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN USB_IRQn 1 */
 183:Src/stm32f0xx_it.c **** 
 184:Src/stm32f0xx_it.c ****   /* USER CODE END USB_IRQn 1 */
 185:Src/stm32f0xx_it.c **** }
 226              		.loc 1 185 1 is_stmt 0 view .LVU23
 227              		@ sp needed
 228 0008 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccJulGdt.s 			page 8


 229              	.L13:
 230 000a C046     		.align	2
 231              	.L12:
 232 000c 00000000 		.word	hpcd_USB_FS
 233              		.cfi_endproc
 234              	.LFE47:
 236              		.text
 237              	.Letext0:
 238              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 239              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 240              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 241              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f042x6.h"
 242              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 243              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 244              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usb.h"
 245              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 246              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 247              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 248              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
ARM GAS  /tmp/ccJulGdt.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_it.c
     /tmp/ccJulGdt.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccJulGdt.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccJulGdt.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccJulGdt.s:46     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccJulGdt.s:63     .text.SVC_Handler:0000000000000000 $t
     /tmp/ccJulGdt.s:70     .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccJulGdt.s:84     .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccJulGdt.s:91     .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccJulGdt.s:105    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccJulGdt.s:112    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccJulGdt.s:133    .text.EXTI4_15_IRQHandler:0000000000000000 $t
     /tmp/ccJulGdt.s:140    .text.EXTI4_15_IRQHandler:0000000000000000 EXTI4_15_IRQHandler
     /tmp/ccJulGdt.s:171    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 $t
     /tmp/ccJulGdt.s:178    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:0000000000000000 TIM1_BRK_UP_TRG_COM_IRQHandler
     /tmp/ccJulGdt.s:199    .text.TIM1_BRK_UP_TRG_COM_IRQHandler:000000000000000c $d
     /tmp/ccJulGdt.s:204    .text.USB_IRQHandler:0000000000000000 $t
     /tmp/ccJulGdt.s:211    .text.USB_IRQHandler:0000000000000000 USB_IRQHandler
     /tmp/ccJulGdt.s:232    .text.USB_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_GPIO_EXTI_IRQHandler
HAL_TIM_IRQHandler
htim1
HAL_PCD_IRQHandler
hpcd_USB_FS
